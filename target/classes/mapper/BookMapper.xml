<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.BookMapper">

    <!-- 총 개수 (검색 포함) -->
    <select id="count" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM books
        <where>
            <if test="q != null and q != ''">
                ( UPPER(title)  LIKE '%' || UPPER(#{q}) || '%'
                OR UPPER(author) LIKE '%' || UPPER(#{q}) || '%')
            </if>
        </where>
    </select>

    <!-- 페이지 조회 (Oracle 12c+ OFFSET/FETCH) -->
    <select id="findPage" resultType="model.Book">
        SELECT
        book_id     AS bookId,
        title,
        author,
        description,
        price,
        stock,
        cover_image AS coverImage
        FROM books
        <where>
            <if test="q != null and q != ''">
                ( UPPER(title)  LIKE '%' || UPPER(#{q}) || '%'
                OR UPPER(author) LIKE '%' || UPPER(#{q}) || '%')
            </if>
        </where>
        ORDER BY book_id DESC
        OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>

    <!-- 상세보기 슬라이드 -->
    <select id="selectPrevId" parameterType="long" resultType="long">
        SELECT MAX(book_id) FROM books WHERE book_id &lt; #{bookId}
    </select>

    <select id="selectNextId" parameterType="long" resultType="long">
        SELECT MIN(book_id) FROM books WHERE book_id &gt; #{bookId}
    </select>

    <!-- id 목록 조회 -->
    <select id="findByIds" parameterType="list" resultType="model.Book">
        SELECT
        book_id AS bookId, title, author, description, price, stock, cover_image AS coverImage
        FROM books
        WHERE book_id IN
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 재고가 충분할 때만 차감(원자적) -->
    <update id="decreaseStockIfEnough">
        UPDATE books
        SET stock = stock - #{qty}
        WHERE book_id = #{bookId}
          AND stock >= #{qty}
    </update>


    <!-- ▼ Oracle 11g라면 위 findPage 대신 아래 주석 사용
    <select id="findPage" resultType="model.Book">
      SELECT * FROM (
        SELECT t.*, ROWNUM rn FROM (
          SELECT
            book_id AS bookId, title, author, description, price, stock, cover_image AS coverImage
          FROM books
          <where>
            <if test="q != null and q != ''">
              ( UPPER(title)  LIKE '%' || UPPER(#{q}) || '%'
                OR UPPER(author) LIKE '%' || UPPER(#{q}) || '%')
            </if>
          </where>
          ORDER BY book_id DESC
        ) t
        WHERE ROWNUM &lt;= #{offset} + #{pageSize}
      )
      WHERE rn &gt; #{offset}
    </select>
    -->

    <!-- 전체 목록 (최신순) - 필요 시 유지 -->
    <select id="findAllBooks" resultType="model.Book">
        SELECT
            book_id     AS bookId,
            title,
            author,
            description,
            price,
            stock,
            cover_image AS coverImage
        FROM books
        ORDER BY book_id DESC
    </select>

    <!-- 단일 조회 (bookId 일관화) -->
    <select id="findBookById" parameterType="long" resultType="model.Book">
        SELECT
            book_id     AS bookId,
            title,
            author,
            description,
            price,
            stock,
            cover_image AS coverImage
        FROM books
        WHERE book_id = #{bookId}
    </select>

    <!-- 키워드 검색 (비페이징 레거시: Oracle CONCAT 제거) -->
    <select id="searchBooksByKeyword" parameterType="string" resultType="model.Book">
        SELECT
            book_id     AS bookId,
            title,
            author,
            description,
            price,
            stock,
            cover_image AS coverImage
        FROM books
        WHERE title  LIKE '%' || #{keyword} || '%'
           OR author LIKE '%' || #{keyword} || '%'
        ORDER BY book_id DESC
    </select>

    <!-- 가격대 검색 -->
    <select id="searchBooksByPriceRange" parameterType="map" resultType="model.Book">
        SELECT
            book_id     AS bookId,
            title,
            author,
            description,
            price,
            stock,
            cover_image AS coverImage
        FROM books
        WHERE price BETWEEN #{min} AND #{max}
        ORDER BY price
    </select>

    <!-- 재고 수정 -->
    <update id="updateBookStock">
        UPDATE books
        SET stock = #{stock}
        WHERE book_id = #{bookId}
    </update>

    <!-- 할인 적용 (파라미터명 percent로 표준화) -->
    <update id="updateBooksPrice" parameterType="int">
        UPDATE books
        SET price = ROUND(price * (1 + #{percent} / 100))
    </update>

    <!-- 재고 차감 -->
    <update id="decreaseStock">
        UPDATE books
        SET stock = stock - #{quantity}
        WHERE book_id = #{bookId}
    </update>

    <!-- CRUD -->
    <insert id="insertBook" parameterType="model.Book">
        INSERT INTO books(title, author, description, price, stock, cover_image)
        VALUES (#{title}, #{author}, #{description}, #{price}, #{stock}, #{coverImage})
    </insert>

    <update id="updateBook" parameterType="model.Book">
        UPDATE books
        SET title       = #{title},
            author      = #{author},
            description = #{description},
            price       = #{price},
            stock       = #{stock},
            cover_image = #{coverImage}
        WHERE book_id = #{bookId}
    </update>

    <delete id="deleteBook" parameterType="long">
        DELETE FROM books WHERE book_id = #{bookId}
    </delete>

    <update id="increaseStock">
        UPDATE books
        SET stock = stock + #{qty}
        WHERE book_id = #{bookId}
    </update>

    <select id="findBestSellers" resultType="map">
        SELECT
            b.book_id      AS "bookId",
            b.title        AS "title",
            b.author       AS "author",
            b.cover_image  AS "coverImage",
            NVL(SUM(oi.quantity), 0) AS "deliveredCount"
        FROM orders o
                 JOIN order_items oi ON oi.order_id = o.order_id
                 JOIN books b       ON b.book_id   = oi.book_id
        WHERE UPPER(TRIM(o.status)) = 'DELIVERED'
        GROUP BY b.book_id, b.title, b.author, b.cover_image
        ORDER BY "deliveredCount" DESC, b.book_id
            FETCH NEXT #{limit} ROWS ONLY
    </select>



</mapper>
